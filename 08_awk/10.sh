#!/usr/bin/env bash

awk '{if ($1 > 20) print $0}' testfile

echo $'\n'

awk '{
    if ($1 > 20){
        x = $1 * 2
        print $1,$3
        print $2,x
    }}' testfile
:<<'END_COMMENT'
# Условный оператор

Awk поддерживает стандартный во многих языках программирования формат условного оператора if-then-else. Однострочный вариант оператора представляет собой ключевое слово if, за которым, в скобках, записывают проверяемое выражение, а затем — команду, которую нужно выполнить, если выражение истинно.

Например, есть такой файл с именем testfile:

    10
    15
    6
    33
    45

Напишем скрипт, который выводит числа из этого файла, большие 20:

```bash
$ awk '{if ($1 > 20) print $1}' testfile
```

Если нужно выполнить в блоке if несколько операторов, их нужно заключить в фигурные скобки:

```bash
$ awk '{
    if ($1 > 20)
    {
        x = $1 * 2
        print x
    }
}' testfile
```

Как уже было сказано, условный оператор awk может содержать блок else:

```bash
$ awk '{
    if ($1 > 20)
    {
        x = $1 * 2
        print x
    } else {
        x = $1 / 2
        print x
    }}' testfile
```

Ветвь else может быть частью однострочной записи условного оператора, включая в себя лишь одну строку с командой. В подобном случае после ветви if, сразу перед else, надо поставить точку с запятой:

```bash
$ awk '{if ($1 > 20) print $1 * 2; else print $1 / 2}' testfile
```
END_COMMENT